status = info
name= properties_configuration

# Give directory path where log files should get stored
property.basePath = /root/logs

# ConsoleAppender will print logs on console
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout

# Specify the pattern of the logs
appender.console.layout.pattern = %d{yyyy-MM-dd'T'HH:mm:ss.SSSX} %5p %c{1}:%L - %m%n

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName=${basePath}/oph-konfo-backend.log
appender.rolling.filePattern=${basePath}oph-konfo-backend_%d{yyyy-MM-dd}.log
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{yyyy-MM-dd'T'HH:mm:ss.SSSX} %5p %c{1}:%L - %m%n
appender.rolling.policies.type = Policies

# Rotate log file each day
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age = 30d

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.access.type = RollingFile
appender.access.name = accessLogger
appender.access.fileName=${basePath}/localhost_access_log.log
appender.access.filePattern=${basePath}localhost_access_log_%d{yyyy-MM-dd}.log
appender.access.layout.type = PatternLayout
appender.access.layout.pattern = %m%n
appender.access.policies.type = Policies

# Rotate log file each day
appender.access.policies.time.type = TimeBasedTriggeringPolicy
appender.access.policies.time.interval = 1
appender.access.policies.time.modulate = true
appender.access.strategy.type = DefaultRolloverStrategy
appender.access.strategy.delete.type = Delete
appender.access.strategy.delete.basePath = ${basePath}
appender.access.strategy.delete.maxDepth = 1
appender.access.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.access.strategy.delete.ifLastModified.age = 30d

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.audit.type = RollingFile
appender.audit.name = auditLogger
appender.audit.fileName=${basePath}/auditlog_konfo-backend.log
appender.audit.filePattern=${basePath}/auditlog_konfo-backend_%d{yyyy-MM-dd}.log
appender.audit.layout.type = PatternLayout
appender.audit.layout.pattern = %m%n
appender.audit.policies.type = Policies

# Rotate log file each day
appender.audit.policies.time.type = TimeBasedTriggeringPolicy
appender.audit.policies.time.interval = 1
appender.audit.policies.time.modulate = true
appender.audit.strategy.type = DefaultRolloverStrategy
appender.audit.strategy.delete.type = Delete
appender.audit.strategy.delete.basePath = ${basePath}
appender.audit.strategy.delete.maxDepth = 1
appender.audit.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.audit.strategy.delete.ifLastModified.age = 30d

# Mention package name here in place of example. Classes in this package or subpackages will use ConsoleAppender and RollingFileAppender for logging
logger.access.name = ACCESS
logger.access.level = debug
logger.access.additivity = false
logger.access.appenderRef.rolling.ref = accessLogger

logger.audit.name = AUDIT
logger.audit.level = debug
logger.audit.additivity = false
logger.audit.appenderRef.rolling.ref = auditLogger

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = info
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger